// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.App.Master.Tables
{
    public sealed class EnemySkillFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::App.Master.Tables.EnemySkill>
    {
        // SkillId
        private static global::System.ReadOnlySpan<byte> GetSpan_SkillId() => new byte[1 + 7] { 167, 83, 107, 105, 108, 108, 73, 100 };
        // MinRange
        private static global::System.ReadOnlySpan<byte> GetSpan_MinRange() => new byte[1 + 8] { 168, 77, 105, 110, 82, 97, 110, 103, 101 };
        // MaxRange
        private static global::System.ReadOnlySpan<byte> GetSpan_MaxRange() => new byte[1 + 8] { 168, 77, 97, 120, 82, 97, 110, 103, 101 };
        // IsIgnoreObstacles
        private static global::System.ReadOnlySpan<byte> GetSpan_IsIgnoreObstacles() => new byte[1 + 17] { 177, 73, 115, 73, 103, 110, 111, 114, 101, 79, 98, 115, 116, 97, 99, 108, 101, 115 };
        // Effect1
        private static global::System.ReadOnlySpan<byte> GetSpan_Effect1() => new byte[1 + 7] { 167, 69, 102, 102, 101, 99, 116, 49 };
        // Effect2
        private static global::System.ReadOnlySpan<byte> GetSpan_Effect2() => new byte[1 + 7] { 167, 69, 102, 102, 101, 99, 116, 50 };
        // Effect3
        private static global::System.ReadOnlySpan<byte> GetSpan_Effect3() => new byte[1 + 7] { 167, 69, 102, 102, 101, 99, 116, 51 };
        // Effect4
        private static global::System.ReadOnlySpan<byte> GetSpan_Effect4() => new byte[1 + 7] { 167, 69, 102, 102, 101, 99, 116, 52 };
        // Effect5
        private static global::System.ReadOnlySpan<byte> GetSpan_Effect5() => new byte[1 + 7] { 167, 69, 102, 102, 101, 99, 116, 53 };
        // ImageId
        private static global::System.ReadOnlySpan<byte> GetSpan_ImageId() => new byte[1 + 7] { 167, 73, 109, 97, 103, 101, 73, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::App.Master.Tables.EnemySkill value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(10);
            writer.WriteRaw(GetSpan_SkillId());
            writer.Write(value.SkillId);
            writer.WriteRaw(GetSpan_MinRange());
            writer.Write(value.MinRange);
            writer.WriteRaw(GetSpan_MaxRange());
            writer.Write(value.MaxRange);
            writer.WriteRaw(GetSpan_IsIgnoreObstacles());
            writer.Write(value.IsIgnoreObstacles);
            writer.WriteRaw(GetSpan_Effect1());
            writer.Write(value.Effect1);
            writer.WriteRaw(GetSpan_Effect2());
            writer.Write(value.Effect2);
            writer.WriteRaw(GetSpan_Effect3());
            writer.Write(value.Effect3);
            writer.WriteRaw(GetSpan_Effect4());
            writer.Write(value.Effect4);
            writer.WriteRaw(GetSpan_Effect5());
            writer.Write(value.Effect5);
            writer.WriteRaw(GetSpan_ImageId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.ImageId, options);
        }

        public global::App.Master.Tables.EnemySkill Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::App.Master.Tables.EnemySkill();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 7:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 28228227695209299UL:
                                ____result.SkillId = reader.ReadUInt32();
                                continue;
                            case 13920244110616133UL:
                                ____result.Effect1 = reader.ReadInt32();
                                continue;
                            case 14201719087326789UL:
                                ____result.Effect2 = reader.ReadInt32();
                                continue;
                            case 14483194064037445UL:
                                ____result.Effect3 = reader.ReadInt32();
                                continue;
                            case 14764669040748101UL:
                                ____result.Effect4 = reader.ReadInt32();
                                continue;
                            case 15046144017458757UL:
                                ____result.Effect5 = reader.ReadInt32();
                                continue;
                            case 28228197546028361UL:
                                ____result.ImageId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 8:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 7306930284705769805UL:
                                ____result.MinRange = reader.ReadInt32();
                                continue;
                            case 7306930284706423117UL:
                                ____result.MaxRange = reader.ReadInt32();
                                continue;
                        }
                    case 17:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_IsIgnoreObstacles().Slice(1))) { goto FAIL; }

                        ____result.IsIgnoreObstacles = reader.ReadBoolean();
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name
