// <auto-generated />
#pragma warning disable CS0105
using App.Master.Tables;
using MasterMemory.Validation;
using MasterMemory;
using MessagePack;
using System.Collections.Generic;
using System;
using App.MD.Tables;

namespace App.MD
{
   public sealed class ImmutableBuilder : ImmutableBuilderBase
   {
        MemoryDatabase memory;

        public ImmutableBuilder(MemoryDatabase memory)
        {
            this.memory = memory;
        }

        public MemoryDatabase Build()
        {
            return memory;
        }

        public void ReplaceAll(System.Collections.Generic.IList<EnemyBase> data)
        {
            var newData = CloneAndSortBy(data, x => x.EnemyId, System.Collections.Generic.Comparer<uint>.Default);
            var table = new EnemyBaseTable(newData);
            memory = new MemoryDatabase(
                table,
                memory.EnemyLevelStatusTable,
                memory.EnemySkillTable,
                memory.EnemySkillEffectTable,
                memory.EnemySkillSetTable,
                memory.HeroFormationTable,
                memory.HeroFormationFrameTable
            
            );
        }

        public void RemoveEnemyBase(uint[] keys)
        {
            var data = RemoveCore(memory.EnemyBaseTable.GetRawDataUnsafe(), keys, x => x.EnemyId, System.Collections.Generic.Comparer<uint>.Default);
            var newData = CloneAndSortBy(data, x => x.EnemyId, System.Collections.Generic.Comparer<uint>.Default);
            var table = new EnemyBaseTable(newData);
            memory = new MemoryDatabase(
                table,
                memory.EnemyLevelStatusTable,
                memory.EnemySkillTable,
                memory.EnemySkillEffectTable,
                memory.EnemySkillSetTable,
                memory.HeroFormationTable,
                memory.HeroFormationFrameTable
            
            );
        }

        public void Diff(EnemyBase[] addOrReplaceData)
        {
            var data = DiffCore(memory.EnemyBaseTable.GetRawDataUnsafe(), addOrReplaceData, x => x.EnemyId, System.Collections.Generic.Comparer<uint>.Default);
            var newData = CloneAndSortBy(data, x => x.EnemyId, System.Collections.Generic.Comparer<uint>.Default);
            var table = new EnemyBaseTable(newData);
            memory = new MemoryDatabase(
                table,
                memory.EnemyLevelStatusTable,
                memory.EnemySkillTable,
                memory.EnemySkillEffectTable,
                memory.EnemySkillSetTable,
                memory.HeroFormationTable,
                memory.HeroFormationFrameTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<EnemyLevelStatus> data)
        {
            var newData = CloneAndSortBy(data, x => (x.EnemyId, x.Level), System.Collections.Generic.Comparer<(uint EnemyId, int Level)>.Default);
            var table = new EnemyLevelStatusTable(newData);
            memory = new MemoryDatabase(
                memory.EnemyBaseTable,
                table,
                memory.EnemySkillTable,
                memory.EnemySkillEffectTable,
                memory.EnemySkillSetTable,
                memory.HeroFormationTable,
                memory.HeroFormationFrameTable
            
            );
        }

        public void RemoveEnemyLevelStatus((uint EnemyId, int Level)[] keys)
        {
            var data = RemoveCore(memory.EnemyLevelStatusTable.GetRawDataUnsafe(), keys, x => (x.EnemyId, x.Level), System.Collections.Generic.Comparer<(uint EnemyId, int Level)>.Default);
            var newData = CloneAndSortBy(data, x => (x.EnemyId, x.Level), System.Collections.Generic.Comparer<(uint EnemyId, int Level)>.Default);
            var table = new EnemyLevelStatusTable(newData);
            memory = new MemoryDatabase(
                memory.EnemyBaseTable,
                table,
                memory.EnemySkillTable,
                memory.EnemySkillEffectTable,
                memory.EnemySkillSetTable,
                memory.HeroFormationTable,
                memory.HeroFormationFrameTable
            
            );
        }

        public void Diff(EnemyLevelStatus[] addOrReplaceData)
        {
            var data = DiffCore(memory.EnemyLevelStatusTable.GetRawDataUnsafe(), addOrReplaceData, x => (x.EnemyId, x.Level), System.Collections.Generic.Comparer<(uint EnemyId, int Level)>.Default);
            var newData = CloneAndSortBy(data, x => (x.EnemyId, x.Level), System.Collections.Generic.Comparer<(uint EnemyId, int Level)>.Default);
            var table = new EnemyLevelStatusTable(newData);
            memory = new MemoryDatabase(
                memory.EnemyBaseTable,
                table,
                memory.EnemySkillTable,
                memory.EnemySkillEffectTable,
                memory.EnemySkillSetTable,
                memory.HeroFormationTable,
                memory.HeroFormationFrameTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<EnemySkill> data)
        {
            var newData = CloneAndSortBy(data, x => x.SkillId, System.Collections.Generic.Comparer<uint>.Default);
            var table = new EnemySkillTable(newData);
            memory = new MemoryDatabase(
                memory.EnemyBaseTable,
                memory.EnemyLevelStatusTable,
                table,
                memory.EnemySkillEffectTable,
                memory.EnemySkillSetTable,
                memory.HeroFormationTable,
                memory.HeroFormationFrameTable
            
            );
        }

        public void RemoveEnemySkill(uint[] keys)
        {
            var data = RemoveCore(memory.EnemySkillTable.GetRawDataUnsafe(), keys, x => x.SkillId, System.Collections.Generic.Comparer<uint>.Default);
            var newData = CloneAndSortBy(data, x => x.SkillId, System.Collections.Generic.Comparer<uint>.Default);
            var table = new EnemySkillTable(newData);
            memory = new MemoryDatabase(
                memory.EnemyBaseTable,
                memory.EnemyLevelStatusTable,
                table,
                memory.EnemySkillEffectTable,
                memory.EnemySkillSetTable,
                memory.HeroFormationTable,
                memory.HeroFormationFrameTable
            
            );
        }

        public void Diff(EnemySkill[] addOrReplaceData)
        {
            var data = DiffCore(memory.EnemySkillTable.GetRawDataUnsafe(), addOrReplaceData, x => x.SkillId, System.Collections.Generic.Comparer<uint>.Default);
            var newData = CloneAndSortBy(data, x => x.SkillId, System.Collections.Generic.Comparer<uint>.Default);
            var table = new EnemySkillTable(newData);
            memory = new MemoryDatabase(
                memory.EnemyBaseTable,
                memory.EnemyLevelStatusTable,
                table,
                memory.EnemySkillEffectTable,
                memory.EnemySkillSetTable,
                memory.HeroFormationTable,
                memory.HeroFormationFrameTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<EnemySkillEffect> data)
        {
            var newData = CloneAndSortBy(data, x => x.EffectId, System.Collections.Generic.Comparer<uint>.Default);
            var table = new EnemySkillEffectTable(newData);
            memory = new MemoryDatabase(
                memory.EnemyBaseTable,
                memory.EnemyLevelStatusTable,
                memory.EnemySkillTable,
                table,
                memory.EnemySkillSetTable,
                memory.HeroFormationTable,
                memory.HeroFormationFrameTable
            
            );
        }

        public void RemoveEnemySkillEffect(uint[] keys)
        {
            var data = RemoveCore(memory.EnemySkillEffectTable.GetRawDataUnsafe(), keys, x => x.EffectId, System.Collections.Generic.Comparer<uint>.Default);
            var newData = CloneAndSortBy(data, x => x.EffectId, System.Collections.Generic.Comparer<uint>.Default);
            var table = new EnemySkillEffectTable(newData);
            memory = new MemoryDatabase(
                memory.EnemyBaseTable,
                memory.EnemyLevelStatusTable,
                memory.EnemySkillTable,
                table,
                memory.EnemySkillSetTable,
                memory.HeroFormationTable,
                memory.HeroFormationFrameTable
            
            );
        }

        public void Diff(EnemySkillEffect[] addOrReplaceData)
        {
            var data = DiffCore(memory.EnemySkillEffectTable.GetRawDataUnsafe(), addOrReplaceData, x => x.EffectId, System.Collections.Generic.Comparer<uint>.Default);
            var newData = CloneAndSortBy(data, x => x.EffectId, System.Collections.Generic.Comparer<uint>.Default);
            var table = new EnemySkillEffectTable(newData);
            memory = new MemoryDatabase(
                memory.EnemyBaseTable,
                memory.EnemyLevelStatusTable,
                memory.EnemySkillTable,
                table,
                memory.EnemySkillSetTable,
                memory.HeroFormationTable,
                memory.HeroFormationFrameTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<EnemySkillSet> data)
        {
            var newData = CloneAndSortBy(data, x => (x.SkillSetId, x.SkillId), System.Collections.Generic.Comparer<(uint SkillSetId, uint SkillId)>.Default);
            var table = new EnemySkillSetTable(newData);
            memory = new MemoryDatabase(
                memory.EnemyBaseTable,
                memory.EnemyLevelStatusTable,
                memory.EnemySkillTable,
                memory.EnemySkillEffectTable,
                table,
                memory.HeroFormationTable,
                memory.HeroFormationFrameTable
            
            );
        }

        public void RemoveEnemySkillSet((uint SkillSetId, uint SkillId)[] keys)
        {
            var data = RemoveCore(memory.EnemySkillSetTable.GetRawDataUnsafe(), keys, x => (x.SkillSetId, x.SkillId), System.Collections.Generic.Comparer<(uint SkillSetId, uint SkillId)>.Default);
            var newData = CloneAndSortBy(data, x => (x.SkillSetId, x.SkillId), System.Collections.Generic.Comparer<(uint SkillSetId, uint SkillId)>.Default);
            var table = new EnemySkillSetTable(newData);
            memory = new MemoryDatabase(
                memory.EnemyBaseTable,
                memory.EnemyLevelStatusTable,
                memory.EnemySkillTable,
                memory.EnemySkillEffectTable,
                table,
                memory.HeroFormationTable,
                memory.HeroFormationFrameTable
            
            );
        }

        public void Diff(EnemySkillSet[] addOrReplaceData)
        {
            var data = DiffCore(memory.EnemySkillSetTable.GetRawDataUnsafe(), addOrReplaceData, x => (x.SkillSetId, x.SkillId), System.Collections.Generic.Comparer<(uint SkillSetId, uint SkillId)>.Default);
            var newData = CloneAndSortBy(data, x => (x.SkillSetId, x.SkillId), System.Collections.Generic.Comparer<(uint SkillSetId, uint SkillId)>.Default);
            var table = new EnemySkillSetTable(newData);
            memory = new MemoryDatabase(
                memory.EnemyBaseTable,
                memory.EnemyLevelStatusTable,
                memory.EnemySkillTable,
                memory.EnemySkillEffectTable,
                table,
                memory.HeroFormationTable,
                memory.HeroFormationFrameTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<HeroFormation> data)
        {
            var newData = CloneAndSortBy(data, x => x.FormationId, System.Collections.Generic.Comparer<uint>.Default);
            var table = new HeroFormationTable(newData);
            memory = new MemoryDatabase(
                memory.EnemyBaseTable,
                memory.EnemyLevelStatusTable,
                memory.EnemySkillTable,
                memory.EnemySkillEffectTable,
                memory.EnemySkillSetTable,
                table,
                memory.HeroFormationFrameTable
            
            );
        }

        public void RemoveHeroFormation(uint[] keys)
        {
            var data = RemoveCore(memory.HeroFormationTable.GetRawDataUnsafe(), keys, x => x.FormationId, System.Collections.Generic.Comparer<uint>.Default);
            var newData = CloneAndSortBy(data, x => x.FormationId, System.Collections.Generic.Comparer<uint>.Default);
            var table = new HeroFormationTable(newData);
            memory = new MemoryDatabase(
                memory.EnemyBaseTable,
                memory.EnemyLevelStatusTable,
                memory.EnemySkillTable,
                memory.EnemySkillEffectTable,
                memory.EnemySkillSetTable,
                table,
                memory.HeroFormationFrameTable
            
            );
        }

        public void Diff(HeroFormation[] addOrReplaceData)
        {
            var data = DiffCore(memory.HeroFormationTable.GetRawDataUnsafe(), addOrReplaceData, x => x.FormationId, System.Collections.Generic.Comparer<uint>.Default);
            var newData = CloneAndSortBy(data, x => x.FormationId, System.Collections.Generic.Comparer<uint>.Default);
            var table = new HeroFormationTable(newData);
            memory = new MemoryDatabase(
                memory.EnemyBaseTable,
                memory.EnemyLevelStatusTable,
                memory.EnemySkillTable,
                memory.EnemySkillEffectTable,
                memory.EnemySkillSetTable,
                table,
                memory.HeroFormationFrameTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<HeroFormationFrame> data)
        {
            var newData = CloneAndSortBy(data, x => x.FormationFrameId, System.Collections.Generic.Comparer<uint>.Default);
            var table = new HeroFormationFrameTable(newData);
            memory = new MemoryDatabase(
                memory.EnemyBaseTable,
                memory.EnemyLevelStatusTable,
                memory.EnemySkillTable,
                memory.EnemySkillEffectTable,
                memory.EnemySkillSetTable,
                memory.HeroFormationTable,
                table
            
            );
        }

        public void RemoveHeroFormationFrame(uint[] keys)
        {
            var data = RemoveCore(memory.HeroFormationFrameTable.GetRawDataUnsafe(), keys, x => x.FormationFrameId, System.Collections.Generic.Comparer<uint>.Default);
            var newData = CloneAndSortBy(data, x => x.FormationFrameId, System.Collections.Generic.Comparer<uint>.Default);
            var table = new HeroFormationFrameTable(newData);
            memory = new MemoryDatabase(
                memory.EnemyBaseTable,
                memory.EnemyLevelStatusTable,
                memory.EnemySkillTable,
                memory.EnemySkillEffectTable,
                memory.EnemySkillSetTable,
                memory.HeroFormationTable,
                table
            
            );
        }

        public void Diff(HeroFormationFrame[] addOrReplaceData)
        {
            var data = DiffCore(memory.HeroFormationFrameTable.GetRawDataUnsafe(), addOrReplaceData, x => x.FormationFrameId, System.Collections.Generic.Comparer<uint>.Default);
            var newData = CloneAndSortBy(data, x => x.FormationFrameId, System.Collections.Generic.Comparer<uint>.Default);
            var table = new HeroFormationFrameTable(newData);
            memory = new MemoryDatabase(
                memory.EnemyBaseTable,
                memory.EnemyLevelStatusTable,
                memory.EnemySkillTable,
                memory.EnemySkillEffectTable,
                memory.EnemySkillSetTable,
                memory.HeroFormationTable,
                table
            
            );
        }

    }
}