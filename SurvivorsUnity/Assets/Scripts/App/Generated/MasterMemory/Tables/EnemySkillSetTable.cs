// <auto-generated />
#pragma warning disable CS0105
using App.Master.Tables;
using MasterMemory.Validation;
using MasterMemory;
using MessagePack;
using System.Collections.Generic;
using System;

namespace App.MD.Tables
{
   public sealed partial class EnemySkillSetTable : TableBase<EnemySkillSet>, ITableUniqueValidate
   {
        public Func<EnemySkillSet, (uint SkillSetId, uint SkillId)> PrimaryKeySelector => primaryIndexSelector;
        readonly Func<EnemySkillSet, (uint SkillSetId, uint SkillId)> primaryIndexSelector;

        readonly EnemySkillSet[] secondaryIndex0;
        readonly Func<EnemySkillSet, uint> secondaryIndex0Selector;

        public EnemySkillSetTable(EnemySkillSet[] sortedData)
            : base(sortedData)
        {
            this.primaryIndexSelector = x => (x.SkillSetId, x.SkillId);
            this.secondaryIndex0Selector = x => x.SkillSetId;
            this.secondaryIndex0 = CloneAndSortBy(this.secondaryIndex0Selector, System.Collections.Generic.Comparer<uint>.Default);
            OnAfterConstruct();
        }

        partial void OnAfterConstruct();

        public RangeView<EnemySkillSet> SortBySkillSetId => new RangeView<EnemySkillSet>(secondaryIndex0, 0, secondaryIndex0.Length - 1, true);

        public EnemySkillSet FindBySkillSetIdAndSkillId((uint SkillSetId, uint SkillId) key)
        {
            return FindUniqueCore(data, primaryIndexSelector, System.Collections.Generic.Comparer<(uint SkillSetId, uint SkillId)>.Default, key, true);
        }
        
        public bool TryFindBySkillSetIdAndSkillId((uint SkillSetId, uint SkillId) key, out EnemySkillSet result)
        {
            return TryFindUniqueCore(data, primaryIndexSelector, System.Collections.Generic.Comparer<(uint SkillSetId, uint SkillId)>.Default, key, out result);
        }

        public EnemySkillSet FindClosestBySkillSetIdAndSkillId((uint SkillSetId, uint SkillId) key, bool selectLower = true)
        {
            return FindUniqueClosestCore(data, primaryIndexSelector, System.Collections.Generic.Comparer<(uint SkillSetId, uint SkillId)>.Default, key, selectLower);
        }

        public RangeView<EnemySkillSet> FindRangeBySkillSetIdAndSkillId((uint SkillSetId, uint SkillId) min, (uint SkillSetId, uint SkillId) max, bool ascendant = true)
        {
            return FindUniqueRangeCore(data, primaryIndexSelector, System.Collections.Generic.Comparer<(uint SkillSetId, uint SkillId)>.Default, min, max, ascendant);
        }

        public RangeView<EnemySkillSet> FindBySkillSetId(uint key)
        {
            return FindManyCore(secondaryIndex0, secondaryIndex0Selector, System.Collections.Generic.Comparer<uint>.Default, key);
        }

        public RangeView<EnemySkillSet> FindClosestBySkillSetId(uint key, bool selectLower = true)
        {
            return FindManyClosestCore(secondaryIndex0, secondaryIndex0Selector, System.Collections.Generic.Comparer<uint>.Default, key, selectLower);
        }

        public RangeView<EnemySkillSet> FindRangeBySkillSetId(uint min, uint max, bool ascendant = true)
        {
            return FindManyRangeCore(secondaryIndex0, secondaryIndex0Selector, System.Collections.Generic.Comparer<uint>.Default, min, max, ascendant);
        }


        void ITableUniqueValidate.ValidateUnique(ValidateResult resultSet)
        {
#if !DISABLE_MASTERMEMORY_VALIDATOR

            ValidateUniqueCore(data, primaryIndexSelector, "(SkillSetId, SkillId)", resultSet);       

#endif
        }

#if !DISABLE_MASTERMEMORY_METADATABASE

        public static MasterMemory.Meta.MetaTable CreateMetaTable()
        {
            return new MasterMemory.Meta.MetaTable(typeof(EnemySkillSet), typeof(EnemySkillSetTable), "EnemySkillSet",
                new MasterMemory.Meta.MetaProperty[]
                {
                    new MasterMemory.Meta.MetaProperty(typeof(EnemySkillSet).GetProperty("SkillSetId")),
                    new MasterMemory.Meta.MetaProperty(typeof(EnemySkillSet).GetProperty("SkillId")),
                },
                new MasterMemory.Meta.MetaIndex[]{
                    new MasterMemory.Meta.MetaIndex(new System.Reflection.PropertyInfo[] {
                        typeof(EnemySkillSet).GetProperty("SkillSetId"),
                        typeof(EnemySkillSet).GetProperty("SkillId"),
                    }, true, true, System.Collections.Generic.Comparer<(uint SkillSetId, uint SkillId)>.Default),
                    new MasterMemory.Meta.MetaIndex(new System.Reflection.PropertyInfo[] {
                        typeof(EnemySkillSet).GetProperty("SkillSetId"),
                    }, false, false, System.Collections.Generic.Comparer<uint>.Default),
                });
        }

#endif
    }
}