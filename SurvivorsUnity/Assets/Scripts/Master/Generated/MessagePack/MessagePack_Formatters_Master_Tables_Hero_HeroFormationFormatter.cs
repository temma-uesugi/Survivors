// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Master.Tables.Hero
{
    public sealed class HeroFormationFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Master.Tables.Hero.HeroFormation>
    {
        // FormationId
        private static global::System.ReadOnlySpan<byte> GetSpan_FormationId() => new byte[1 + 11] { 171, 70, 111, 114, 109, 97, 116, 105, 111, 110, 73, 100 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // Description
        private static global::System.ReadOnlySpan<byte> GetSpan_Description() => new byte[1 + 11] { 171, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110 };
        // FrontDamageCutCoef
        private static global::System.ReadOnlySpan<byte> GetSpan_FrontDamageCutCoef() => new byte[1 + 18] { 178, 70, 114, 111, 110, 116, 68, 97, 109, 97, 103, 101, 67, 117, 116, 67, 111, 101, 102 };
        // SideDamageCutCoef
        private static global::System.ReadOnlySpan<byte> GetSpan_SideDamageCutCoef() => new byte[1 + 17] { 177, 83, 105, 100, 101, 68, 97, 109, 97, 103, 101, 67, 117, 116, 67, 111, 101, 102 };
        // BackDamageCutCoef
        private static global::System.ReadOnlySpan<byte> GetSpan_BackDamageCutCoef() => new byte[1 + 17] { 177, 66, 97, 99, 107, 68, 97, 109, 97, 103, 101, 67, 117, 116, 67, 111, 101, 102 };
        // BonusHpCoef
        private static global::System.ReadOnlySpan<byte> GetSpan_BonusHpCoef() => new byte[1 + 11] { 171, 66, 111, 110, 117, 115, 72, 112, 67, 111, 101, 102 };
        // BonusDamageCutCoef
        private static global::System.ReadOnlySpan<byte> GetSpan_BonusDamageCutCoef() => new byte[1 + 18] { 178, 66, 111, 110, 117, 115, 68, 97, 109, 97, 103, 101, 67, 117, 116, 67, 111, 101, 102 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Master.Tables.Hero.HeroFormation value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(8);
            writer.WriteRaw(GetSpan_FormationId());
            writer.Write(value.FormationId);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_Description());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Description, options);
            writer.WriteRaw(GetSpan_FrontDamageCutCoef());
            writer.Write(value.FrontDamageCutCoef);
            writer.WriteRaw(GetSpan_SideDamageCutCoef());
            writer.Write(value.SideDamageCutCoef);
            writer.WriteRaw(GetSpan_BackDamageCutCoef());
            writer.Write(value.BackDamageCutCoef);
            writer.WriteRaw(GetSpan_BonusHpCoef());
            writer.Write(value.BonusHpCoef);
            writer.WriteRaw(GetSpan_BonusDamageCutCoef());
            writer.Write(value.BonusDamageCutCoef);
        }

        public global::Master.Tables.Hero.HeroFormation Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __FormationId__ = default(uint);
            var __Name__ = default(string);
            var __Description__ = default(string);
            var __FrontDamageCutCoef__ = default(float);
            var __SideDamageCutCoef__ = default(float);
            var __BackDamageCutCoef__ = default(float);
            var __BonusHpCoef__ = default(float);
            var __BonusDamageCutCoef__ = default(float);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 11:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 8028075772561485638UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 6572398UL) { goto FAIL; }

                                __FormationId__ = reader.ReadUInt32();
                                continue;

                            case 8390322045806929220UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7237481UL) { goto FAIL; }

                                __Description__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 4859463658661375810UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 6710639UL) { goto FAIL; }

                                __BonusHpCoef__ = reader.ReadSingle();
                                continue;

                        }
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701667150UL) { goto FAIL; }

                        __Name__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 18:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 7881656089734771270UL:
                                if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_FrontDamageCutCoef().Slice(1 + 8))) { goto FAIL; }

                                __FrontDamageCutCoef__ = reader.ReadSingle();
                                continue;

                            case 7881656085557178178UL:
                                if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_BonusDamageCutCoef().Slice(1 + 8))) { goto FAIL; }

                                __BonusDamageCutCoef__ = reader.ReadSingle();
                                continue;

                        }
                    case 17:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 7020374340527221075UL:
                                if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_SideDamageCutCoef().Slice(1 + 8))) { goto FAIL; }

                                __SideDamageCutCoef__ = reader.ReadSingle();
                                continue;

                            case 7020374340627816770UL:
                                if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_BackDamageCutCoef().Slice(1 + 8))) { goto FAIL; }

                                __BackDamageCutCoef__ = reader.ReadSingle();
                                continue;

                        }

                }
            }

            var ____result = new global::Master.Tables.Hero.HeroFormation(__FormationId__, __Name__, __Description__, __FrontDamageCutCoef__, __SideDamageCutCoef__, __BackDamageCutCoef__, __BonusHpCoef__, __BonusDamageCutCoef__);
            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name
