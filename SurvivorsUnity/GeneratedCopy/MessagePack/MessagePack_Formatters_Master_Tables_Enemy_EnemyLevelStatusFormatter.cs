// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Master.Tables.Enemy
{
    public sealed class EnemyLevelStatusFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Master.Tables.Enemy.EnemyLevelStatusEntity>
    {
        // EnemyId
        private static global::System.ReadOnlySpan<byte> GetSpan_EnemyId() => new byte[1 + 7] { 167, 69, 110, 101, 109, 121, 73, 100 };
        // Level
        private static global::System.ReadOnlySpan<byte> GetSpan_Level() => new byte[1 + 5] { 165, 76, 101, 118, 101, 108 };
        // Hp
        private static global::System.ReadOnlySpan<byte> GetSpan_Hp() => new byte[1 + 2] { 162, 72, 112 };
        // DirectAttackDefense
        private static global::System.ReadOnlySpan<byte> GetSpan_DirectAttackDefense() => new byte[1 + 19] { 179, 68, 105, 114, 101, 99, 116, 65, 116, 116, 97, 99, 107, 68, 101, 102, 101, 110, 115, 101 };
        // RangedAttackDefense
        private static global::System.ReadOnlySpan<byte> GetSpan_RangedAttackDefense() => new byte[1 + 19] { 179, 82, 97, 110, 103, 101, 100, 65, 116, 116, 97, 99, 107, 68, 101, 102, 101, 110, 115, 101 };
        // AttackPower
        private static global::System.ReadOnlySpan<byte> GetSpan_AttackPower() => new byte[1 + 11] { 171, 65, 116, 116, 97, 99, 107, 80, 111, 119, 101, 114 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Master.Tables.Enemy.EnemyLevelStatusEntity value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteMapHeader(6);
            writer.WriteRaw(GetSpan_EnemyId());
            writer.Write(value.EnemyId);
            writer.WriteRaw(GetSpan_Level());
            writer.Write(value.Level);
            writer.WriteRaw(GetSpan_Hp());
            writer.Write(value.Hp);
            writer.WriteRaw(GetSpan_DirectAttackDefense());
            writer.Write(value.DirectAttackDefense);
            writer.WriteRaw(GetSpan_RangedAttackDefense());
            writer.Write(value.RangedAttackDefense);
            writer.WriteRaw(GetSpan_AttackPower());
            writer.Write(value.AttackPower);
        }

        public global::Master.Tables.Enemy.EnemyLevelStatusEntity Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadMapHeader();
            var __EnemyId__ = default(uint);
            var __Level__ = default(int);
            var __Hp__ = default(int);
            var __DirectAttackDefense__ = default(int);
            var __RangedAttackDefense__ = default(int);
            var __AttackPower__ = default(int);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 28228283546299973UL) { goto FAIL; }

                        __EnemyId__ = reader.ReadUInt32();
                        continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 465558725964UL) { goto FAIL; }

                        __Level__ = reader.ReadInt32();
                        continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 28744UL) { goto FAIL; }

                        __Hp__ = reader.ReadInt32();
                        continue;
                    case 19:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 8377104752138414404UL:
                                if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_DirectAttackDefense().Slice(1 + 8))) { goto FAIL; }

                                __DirectAttackDefense__ = reader.ReadInt32();
                                continue;

                            case 8377087168575594834UL:
                                if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_RangedAttackDefense().Slice(1 + 8))) { goto FAIL; }

                                __RangedAttackDefense__ = reader.ReadInt32();
                                continue;

                        }
                    case 11:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_AttackPower().Slice(1))) { goto FAIL; }

                        __AttackPower__ = reader.ReadInt32();
                        continue;

                }
            }

            var ____result = new global::Master.Tables.Enemy.EnemyLevelStatusEntity(__EnemyId__, __Level__, __Hp__, __DirectAttackDefense__, __RangedAttackDefense__, __AttackPower__);
            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name
