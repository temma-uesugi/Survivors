// <auto-generated />
#pragma warning disable CS0105
using Master.Tables.Hero;
using MasterMemory.Validation;
using MasterMemory;
using MessagePack;
using System.Collections.Generic;
using System;

namespace App.MD.Tables
{
   public sealed partial class HeroFormationFrameTable : TableBase<HeroFormationFrame>, ITableUniqueValidate
   {
        public Func<HeroFormationFrame, (uint FormationId, int FrameIndex)> PrimaryKeySelector => primaryIndexSelector;
        readonly Func<HeroFormationFrame, (uint FormationId, int FrameIndex)> primaryIndexSelector;

        readonly HeroFormationFrame[] secondaryIndex0;
        readonly Func<HeroFormationFrame, uint> secondaryIndex0Selector;

        public HeroFormationFrameTable(HeroFormationFrame[] sortedData)
            : base(sortedData)
        {
            this.primaryIndexSelector = x => (x.FormationId, x.FrameIndex);
            this.secondaryIndex0Selector = x => x.FormationId;
            this.secondaryIndex0 = CloneAndSortBy(this.secondaryIndex0Selector, System.Collections.Generic.Comparer<uint>.Default);
            OnAfterConstruct();
        }

        partial void OnAfterConstruct();

        public RangeView<HeroFormationFrame> SortByFormationId => new RangeView<HeroFormationFrame>(secondaryIndex0, 0, secondaryIndex0.Length - 1, true);

        public HeroFormationFrame FindByFormationIdAndFrameIndex((uint FormationId, int FrameIndex) key)
        {
            return FindUniqueCore(data, primaryIndexSelector, System.Collections.Generic.Comparer<(uint FormationId, int FrameIndex)>.Default, key, true);
        }
        
        public bool TryFindByFormationIdAndFrameIndex((uint FormationId, int FrameIndex) key, out HeroFormationFrame result)
        {
            return TryFindUniqueCore(data, primaryIndexSelector, System.Collections.Generic.Comparer<(uint FormationId, int FrameIndex)>.Default, key, out result);
        }

        public HeroFormationFrame FindClosestByFormationIdAndFrameIndex((uint FormationId, int FrameIndex) key, bool selectLower = true)
        {
            return FindUniqueClosestCore(data, primaryIndexSelector, System.Collections.Generic.Comparer<(uint FormationId, int FrameIndex)>.Default, key, selectLower);
        }

        public RangeView<HeroFormationFrame> FindRangeByFormationIdAndFrameIndex((uint FormationId, int FrameIndex) min, (uint FormationId, int FrameIndex) max, bool ascendant = true)
        {
            return FindUniqueRangeCore(data, primaryIndexSelector, System.Collections.Generic.Comparer<(uint FormationId, int FrameIndex)>.Default, min, max, ascendant);
        }

        public RangeView<HeroFormationFrame> FindByFormationId(uint key)
        {
            return FindManyCore(secondaryIndex0, secondaryIndex0Selector, System.Collections.Generic.Comparer<uint>.Default, key);
        }

        public RangeView<HeroFormationFrame> FindClosestByFormationId(uint key, bool selectLower = true)
        {
            return FindManyClosestCore(secondaryIndex0, secondaryIndex0Selector, System.Collections.Generic.Comparer<uint>.Default, key, selectLower);
        }

        public RangeView<HeroFormationFrame> FindRangeByFormationId(uint min, uint max, bool ascendant = true)
        {
            return FindManyRangeCore(secondaryIndex0, secondaryIndex0Selector, System.Collections.Generic.Comparer<uint>.Default, min, max, ascendant);
        }


        void ITableUniqueValidate.ValidateUnique(ValidateResult resultSet)
        {
#if !DISABLE_MASTERMEMORY_VALIDATOR

            ValidateUniqueCore(data, primaryIndexSelector, "(FormationId, FrameIndex)", resultSet);       

#endif
        }

#if !DISABLE_MASTERMEMORY_METADATABASE

        public static MasterMemory.Meta.MetaTable CreateMetaTable()
        {
            return new MasterMemory.Meta.MetaTable(typeof(HeroFormationFrame), typeof(HeroFormationFrameTable), "HeroFormationFrame",
                new MasterMemory.Meta.MetaProperty[]
                {
                    new MasterMemory.Meta.MetaProperty(typeof(HeroFormationFrame).GetProperty("FormationId")),
                    new MasterMemory.Meta.MetaProperty(typeof(HeroFormationFrame).GetProperty("FrameIndex")),
                    new MasterMemory.Meta.MetaProperty(typeof(HeroFormationFrame).GetProperty("OffsetX")),
                    new MasterMemory.Meta.MetaProperty(typeof(HeroFormationFrame).GetProperty("OffsetY")),
                    new MasterMemory.Meta.MetaProperty(typeof(HeroFormationFrame).GetProperty("DamageRatio")),
                    new MasterMemory.Meta.MetaProperty(typeof(HeroFormationFrame).GetProperty("HpCoef")),
                    new MasterMemory.Meta.MetaProperty(typeof(HeroFormationFrame).GetProperty("AttackCoef")),
                },
                new MasterMemory.Meta.MetaIndex[]{
                    new MasterMemory.Meta.MetaIndex(new System.Reflection.PropertyInfo[] {
                        typeof(HeroFormationFrame).GetProperty("FormationId"),
                        typeof(HeroFormationFrame).GetProperty("FrameIndex"),
                    }, true, true, System.Collections.Generic.Comparer<(uint FormationId, int FrameIndex)>.Default),
                    new MasterMemory.Meta.MetaIndex(new System.Reflection.PropertyInfo[] {
                        typeof(HeroFormationFrame).GetProperty("FormationId"),
                    }, false, false, System.Collections.Generic.Comparer<uint>.Default),
                });
        }

#endif
    }
}