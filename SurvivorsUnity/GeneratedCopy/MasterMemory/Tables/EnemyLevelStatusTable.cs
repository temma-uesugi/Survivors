// <auto-generated />
#pragma warning disable CS0105
using Master.Tables.Enemy;
using MasterMemory.Validation;
using MasterMemory;
using MessagePack;
using System.Collections.Generic;
using System;

namespace App.MD.Tables
{
   public sealed partial class EnemyLevelStatusTable : TableBase<EnemyLevelStatus>, ITableUniqueValidate
   {
        public Func<EnemyLevelStatus, (uint EnemyId, int Level)> PrimaryKeySelector => primaryIndexSelector;
        readonly Func<EnemyLevelStatus, (uint EnemyId, int Level)> primaryIndexSelector;


        public EnemyLevelStatusTable(EnemyLevelStatus[] sortedData)
            : base(sortedData)
        {
            this.primaryIndexSelector = x => (x.EnemyId, x.Level);
            OnAfterConstruct();
        }

        partial void OnAfterConstruct();


        public EnemyLevelStatus FindByEnemyIdAndLevel((uint EnemyId, int Level) key)
        {
            return FindUniqueCore(data, primaryIndexSelector, System.Collections.Generic.Comparer<(uint EnemyId, int Level)>.Default, key, true);
        }
        
        public bool TryFindByEnemyIdAndLevel((uint EnemyId, int Level) key, out EnemyLevelStatus result)
        {
            return TryFindUniqueCore(data, primaryIndexSelector, System.Collections.Generic.Comparer<(uint EnemyId, int Level)>.Default, key, out result);
        }

        public EnemyLevelStatus FindClosestByEnemyIdAndLevel((uint EnemyId, int Level) key, bool selectLower = true)
        {
            return FindUniqueClosestCore(data, primaryIndexSelector, System.Collections.Generic.Comparer<(uint EnemyId, int Level)>.Default, key, selectLower);
        }

        public RangeView<EnemyLevelStatus> FindRangeByEnemyIdAndLevel((uint EnemyId, int Level) min, (uint EnemyId, int Level) max, bool ascendant = true)
        {
            return FindUniqueRangeCore(data, primaryIndexSelector, System.Collections.Generic.Comparer<(uint EnemyId, int Level)>.Default, min, max, ascendant);
        }


        void ITableUniqueValidate.ValidateUnique(ValidateResult resultSet)
        {
#if !DISABLE_MASTERMEMORY_VALIDATOR

            ValidateUniqueCore(data, primaryIndexSelector, "(EnemyId, Level)", resultSet);       

#endif
        }

#if !DISABLE_MASTERMEMORY_METADATABASE

        public static MasterMemory.Meta.MetaTable CreateMetaTable()
        {
            return new MasterMemory.Meta.MetaTable(typeof(EnemyLevelStatus), typeof(EnemyLevelStatusTable), "EnemyStatus",
                new MasterMemory.Meta.MetaProperty[]
                {
                    new MasterMemory.Meta.MetaProperty(typeof(EnemyLevelStatus).GetProperty("EnemyId")),
                    new MasterMemory.Meta.MetaProperty(typeof(EnemyLevelStatus).GetProperty("Level")),
                    new MasterMemory.Meta.MetaProperty(typeof(EnemyLevelStatus).GetProperty("Hp")),
                    new MasterMemory.Meta.MetaProperty(typeof(EnemyLevelStatus).GetProperty("DirectAttackDefense")),
                    new MasterMemory.Meta.MetaProperty(typeof(EnemyLevelStatus).GetProperty("RangedAttackDefense")),
                    new MasterMemory.Meta.MetaProperty(typeof(EnemyLevelStatus).GetProperty("AttackPower")),
                },
                new MasterMemory.Meta.MetaIndex[]{
                    new MasterMemory.Meta.MetaIndex(new System.Reflection.PropertyInfo[] {
                        typeof(EnemyLevelStatus).GetProperty("EnemyId"),
                        typeof(EnemyLevelStatus).GetProperty("Level"),
                    }, true, true, System.Collections.Generic.Comparer<(uint EnemyId, int Level)>.Default),
                });
        }

#endif
    }
}