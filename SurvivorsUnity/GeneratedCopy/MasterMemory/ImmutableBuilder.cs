// <auto-generated />
#pragma warning disable CS0105
using Master.Constants;
using Master.Tables.Enemy;
using Master.Tables.Hero;
using MasterMemory.Validation;
using MasterMemory;
using MessagePack;
using System.Collections.Generic;
using System;
using App.MD.Tables;

namespace App.MD
{
   public sealed class ImmutableBuilder : ImmutableBuilderBase
   {
        MemoryDatabase memory;

        public ImmutableBuilder(MemoryDatabase memory)
        {
            this.memory = memory;
        }

        public MemoryDatabase Build()
        {
            return memory;
        }

        public void ReplaceAll(System.Collections.Generic.IList<EnemyBaseEntity> data)
        {
            var newData = CloneAndSortBy(data, x => x.EnemyId, System.Collections.Generic.Comparer<uint>.Default);
            var table = new EnemyBaseEntityTable(newData);
            memory = new MemoryDatabase(
                table,
                memory.EnemyLevelStatusEntityTable,
                memory.EnemySkillEffectEntityTable,
                memory.EnemySkillEntityTable,
                memory.EnemySkillSetEntityTable,
                memory.HeroFormationEntityTable,
                memory.HeroFormationFrameEntityTable
            
            );
        }

        public void RemoveEnemyBaseEntity(uint[] keys)
        {
            var data = RemoveCore(memory.EnemyBaseEntityTable.GetRawDataUnsafe(), keys, x => x.EnemyId, System.Collections.Generic.Comparer<uint>.Default);
            var newData = CloneAndSortBy(data, x => x.EnemyId, System.Collections.Generic.Comparer<uint>.Default);
            var table = new EnemyBaseEntityTable(newData);
            memory = new MemoryDatabase(
                table,
                memory.EnemyLevelStatusEntityTable,
                memory.EnemySkillEffectEntityTable,
                memory.EnemySkillEntityTable,
                memory.EnemySkillSetEntityTable,
                memory.HeroFormationEntityTable,
                memory.HeroFormationFrameEntityTable
            
            );
        }

        public void Diff(EnemyBaseEntity[] addOrReplaceData)
        {
            var data = DiffCore(memory.EnemyBaseEntityTable.GetRawDataUnsafe(), addOrReplaceData, x => x.EnemyId, System.Collections.Generic.Comparer<uint>.Default);
            var newData = CloneAndSortBy(data, x => x.EnemyId, System.Collections.Generic.Comparer<uint>.Default);
            var table = new EnemyBaseEntityTable(newData);
            memory = new MemoryDatabase(
                table,
                memory.EnemyLevelStatusEntityTable,
                memory.EnemySkillEffectEntityTable,
                memory.EnemySkillEntityTable,
                memory.EnemySkillSetEntityTable,
                memory.HeroFormationEntityTable,
                memory.HeroFormationFrameEntityTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<EnemyLevelStatusEntity> data)
        {
            var newData = CloneAndSortBy(data, x => (x.EnemyId, x.Level), System.Collections.Generic.Comparer<(uint EnemyId, int Level)>.Default);
            var table = new EnemyLevelStatusEntityTable(newData);
            memory = new MemoryDatabase(
                memory.EnemyBaseEntityTable,
                table,
                memory.EnemySkillEffectEntityTable,
                memory.EnemySkillEntityTable,
                memory.EnemySkillSetEntityTable,
                memory.HeroFormationEntityTable,
                memory.HeroFormationFrameEntityTable
            
            );
        }

        public void RemoveEnemyLevelStatusEntity((uint EnemyId, int Level)[] keys)
        {
            var data = RemoveCore(memory.EnemyLevelStatusEntityTable.GetRawDataUnsafe(), keys, x => (x.EnemyId, x.Level), System.Collections.Generic.Comparer<(uint EnemyId, int Level)>.Default);
            var newData = CloneAndSortBy(data, x => (x.EnemyId, x.Level), System.Collections.Generic.Comparer<(uint EnemyId, int Level)>.Default);
            var table = new EnemyLevelStatusEntityTable(newData);
            memory = new MemoryDatabase(
                memory.EnemyBaseEntityTable,
                table,
                memory.EnemySkillEffectEntityTable,
                memory.EnemySkillEntityTable,
                memory.EnemySkillSetEntityTable,
                memory.HeroFormationEntityTable,
                memory.HeroFormationFrameEntityTable
            
            );
        }

        public void Diff(EnemyLevelStatusEntity[] addOrReplaceData)
        {
            var data = DiffCore(memory.EnemyLevelStatusEntityTable.GetRawDataUnsafe(), addOrReplaceData, x => (x.EnemyId, x.Level), System.Collections.Generic.Comparer<(uint EnemyId, int Level)>.Default);
            var newData = CloneAndSortBy(data, x => (x.EnemyId, x.Level), System.Collections.Generic.Comparer<(uint EnemyId, int Level)>.Default);
            var table = new EnemyLevelStatusEntityTable(newData);
            memory = new MemoryDatabase(
                memory.EnemyBaseEntityTable,
                table,
                memory.EnemySkillEffectEntityTable,
                memory.EnemySkillEntityTable,
                memory.EnemySkillSetEntityTable,
                memory.HeroFormationEntityTable,
                memory.HeroFormationFrameEntityTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<EnemySkillEffectEntity> data)
        {
            var newData = CloneAndSortBy(data, x => x.EffectId, System.Collections.Generic.Comparer<uint>.Default);
            var table = new EnemySkillEffectEntityTable(newData);
            memory = new MemoryDatabase(
                memory.EnemyBaseEntityTable,
                memory.EnemyLevelStatusEntityTable,
                table,
                memory.EnemySkillEntityTable,
                memory.EnemySkillSetEntityTable,
                memory.HeroFormationEntityTable,
                memory.HeroFormationFrameEntityTable
            
            );
        }

        public void RemoveEnemySkillEffectEntity(uint[] keys)
        {
            var data = RemoveCore(memory.EnemySkillEffectEntityTable.GetRawDataUnsafe(), keys, x => x.EffectId, System.Collections.Generic.Comparer<uint>.Default);
            var newData = CloneAndSortBy(data, x => x.EffectId, System.Collections.Generic.Comparer<uint>.Default);
            var table = new EnemySkillEffectEntityTable(newData);
            memory = new MemoryDatabase(
                memory.EnemyBaseEntityTable,
                memory.EnemyLevelStatusEntityTable,
                table,
                memory.EnemySkillEntityTable,
                memory.EnemySkillSetEntityTable,
                memory.HeroFormationEntityTable,
                memory.HeroFormationFrameEntityTable
            
            );
        }

        public void Diff(EnemySkillEffectEntity[] addOrReplaceData)
        {
            var data = DiffCore(memory.EnemySkillEffectEntityTable.GetRawDataUnsafe(), addOrReplaceData, x => x.EffectId, System.Collections.Generic.Comparer<uint>.Default);
            var newData = CloneAndSortBy(data, x => x.EffectId, System.Collections.Generic.Comparer<uint>.Default);
            var table = new EnemySkillEffectEntityTable(newData);
            memory = new MemoryDatabase(
                memory.EnemyBaseEntityTable,
                memory.EnemyLevelStatusEntityTable,
                table,
                memory.EnemySkillEntityTable,
                memory.EnemySkillSetEntityTable,
                memory.HeroFormationEntityTable,
                memory.HeroFormationFrameEntityTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<EnemySkillEntity> data)
        {
            var newData = CloneAndSortBy(data, x => x.SkillId, System.Collections.Generic.Comparer<uint>.Default);
            var table = new EnemySkillEntityTable(newData);
            memory = new MemoryDatabase(
                memory.EnemyBaseEntityTable,
                memory.EnemyLevelStatusEntityTable,
                memory.EnemySkillEffectEntityTable,
                table,
                memory.EnemySkillSetEntityTable,
                memory.HeroFormationEntityTable,
                memory.HeroFormationFrameEntityTable
            
            );
        }

        public void RemoveEnemySkillEntity(uint[] keys)
        {
            var data = RemoveCore(memory.EnemySkillEntityTable.GetRawDataUnsafe(), keys, x => x.SkillId, System.Collections.Generic.Comparer<uint>.Default);
            var newData = CloneAndSortBy(data, x => x.SkillId, System.Collections.Generic.Comparer<uint>.Default);
            var table = new EnemySkillEntityTable(newData);
            memory = new MemoryDatabase(
                memory.EnemyBaseEntityTable,
                memory.EnemyLevelStatusEntityTable,
                memory.EnemySkillEffectEntityTable,
                table,
                memory.EnemySkillSetEntityTable,
                memory.HeroFormationEntityTable,
                memory.HeroFormationFrameEntityTable
            
            );
        }

        public void Diff(EnemySkillEntity[] addOrReplaceData)
        {
            var data = DiffCore(memory.EnemySkillEntityTable.GetRawDataUnsafe(), addOrReplaceData, x => x.SkillId, System.Collections.Generic.Comparer<uint>.Default);
            var newData = CloneAndSortBy(data, x => x.SkillId, System.Collections.Generic.Comparer<uint>.Default);
            var table = new EnemySkillEntityTable(newData);
            memory = new MemoryDatabase(
                memory.EnemyBaseEntityTable,
                memory.EnemyLevelStatusEntityTable,
                memory.EnemySkillEffectEntityTable,
                table,
                memory.EnemySkillSetEntityTable,
                memory.HeroFormationEntityTable,
                memory.HeroFormationFrameEntityTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<EnemySkillSetEntity> data)
        {
            var newData = CloneAndSortBy(data, x => (x.SkillSetId, x.SkillId), System.Collections.Generic.Comparer<(uint SkillSetId, uint SkillId)>.Default);
            var table = new EnemySkillSetEntityTable(newData);
            memory = new MemoryDatabase(
                memory.EnemyBaseEntityTable,
                memory.EnemyLevelStatusEntityTable,
                memory.EnemySkillEffectEntityTable,
                memory.EnemySkillEntityTable,
                table,
                memory.HeroFormationEntityTable,
                memory.HeroFormationFrameEntityTable
            
            );
        }

        public void RemoveEnemySkillSetEntity((uint SkillSetId, uint SkillId)[] keys)
        {
            var data = RemoveCore(memory.EnemySkillSetEntityTable.GetRawDataUnsafe(), keys, x => (x.SkillSetId, x.SkillId), System.Collections.Generic.Comparer<(uint SkillSetId, uint SkillId)>.Default);
            var newData = CloneAndSortBy(data, x => (x.SkillSetId, x.SkillId), System.Collections.Generic.Comparer<(uint SkillSetId, uint SkillId)>.Default);
            var table = new EnemySkillSetEntityTable(newData);
            memory = new MemoryDatabase(
                memory.EnemyBaseEntityTable,
                memory.EnemyLevelStatusEntityTable,
                memory.EnemySkillEffectEntityTable,
                memory.EnemySkillEntityTable,
                table,
                memory.HeroFormationEntityTable,
                memory.HeroFormationFrameEntityTable
            
            );
        }

        public void Diff(EnemySkillSetEntity[] addOrReplaceData)
        {
            var data = DiffCore(memory.EnemySkillSetEntityTable.GetRawDataUnsafe(), addOrReplaceData, x => (x.SkillSetId, x.SkillId), System.Collections.Generic.Comparer<(uint SkillSetId, uint SkillId)>.Default);
            var newData = CloneAndSortBy(data, x => (x.SkillSetId, x.SkillId), System.Collections.Generic.Comparer<(uint SkillSetId, uint SkillId)>.Default);
            var table = new EnemySkillSetEntityTable(newData);
            memory = new MemoryDatabase(
                memory.EnemyBaseEntityTable,
                memory.EnemyLevelStatusEntityTable,
                memory.EnemySkillEffectEntityTable,
                memory.EnemySkillEntityTable,
                table,
                memory.HeroFormationEntityTable,
                memory.HeroFormationFrameEntityTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<HeroFormationEntity> data)
        {
            var newData = CloneAndSortBy(data, x => x.FormationId, System.Collections.Generic.Comparer<uint>.Default);
            var table = new HeroFormationEntityTable(newData);
            memory = new MemoryDatabase(
                memory.EnemyBaseEntityTable,
                memory.EnemyLevelStatusEntityTable,
                memory.EnemySkillEffectEntityTable,
                memory.EnemySkillEntityTable,
                memory.EnemySkillSetEntityTable,
                table,
                memory.HeroFormationFrameEntityTable
            
            );
        }

        public void RemoveHeroFormationEntity(uint[] keys)
        {
            var data = RemoveCore(memory.HeroFormationEntityTable.GetRawDataUnsafe(), keys, x => x.FormationId, System.Collections.Generic.Comparer<uint>.Default);
            var newData = CloneAndSortBy(data, x => x.FormationId, System.Collections.Generic.Comparer<uint>.Default);
            var table = new HeroFormationEntityTable(newData);
            memory = new MemoryDatabase(
                memory.EnemyBaseEntityTable,
                memory.EnemyLevelStatusEntityTable,
                memory.EnemySkillEffectEntityTable,
                memory.EnemySkillEntityTable,
                memory.EnemySkillSetEntityTable,
                table,
                memory.HeroFormationFrameEntityTable
            
            );
        }

        public void Diff(HeroFormationEntity[] addOrReplaceData)
        {
            var data = DiffCore(memory.HeroFormationEntityTable.GetRawDataUnsafe(), addOrReplaceData, x => x.FormationId, System.Collections.Generic.Comparer<uint>.Default);
            var newData = CloneAndSortBy(data, x => x.FormationId, System.Collections.Generic.Comparer<uint>.Default);
            var table = new HeroFormationEntityTable(newData);
            memory = new MemoryDatabase(
                memory.EnemyBaseEntityTable,
                memory.EnemyLevelStatusEntityTable,
                memory.EnemySkillEffectEntityTable,
                memory.EnemySkillEntityTable,
                memory.EnemySkillSetEntityTable,
                table,
                memory.HeroFormationFrameEntityTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<HeroFormationFrameEntity> data)
        {
            var newData = CloneAndSortBy(data, x => (x.FormationId, x.FrameIndex), System.Collections.Generic.Comparer<(uint FormationId, int FrameIndex)>.Default);
            var table = new HeroFormationFrameEntityTable(newData);
            memory = new MemoryDatabase(
                memory.EnemyBaseEntityTable,
                memory.EnemyLevelStatusEntityTable,
                memory.EnemySkillEffectEntityTable,
                memory.EnemySkillEntityTable,
                memory.EnemySkillSetEntityTable,
                memory.HeroFormationEntityTable,
                table
            
            );
        }

        public void RemoveHeroFormationFrameEntity((uint FormationId, int FrameIndex)[] keys)
        {
            var data = RemoveCore(memory.HeroFormationFrameEntityTable.GetRawDataUnsafe(), keys, x => (x.FormationId, x.FrameIndex), System.Collections.Generic.Comparer<(uint FormationId, int FrameIndex)>.Default);
            var newData = CloneAndSortBy(data, x => (x.FormationId, x.FrameIndex), System.Collections.Generic.Comparer<(uint FormationId, int FrameIndex)>.Default);
            var table = new HeroFormationFrameEntityTable(newData);
            memory = new MemoryDatabase(
                memory.EnemyBaseEntityTable,
                memory.EnemyLevelStatusEntityTable,
                memory.EnemySkillEffectEntityTable,
                memory.EnemySkillEntityTable,
                memory.EnemySkillSetEntityTable,
                memory.HeroFormationEntityTable,
                table
            
            );
        }

        public void Diff(HeroFormationFrameEntity[] addOrReplaceData)
        {
            var data = DiffCore(memory.HeroFormationFrameEntityTable.GetRawDataUnsafe(), addOrReplaceData, x => (x.FormationId, x.FrameIndex), System.Collections.Generic.Comparer<(uint FormationId, int FrameIndex)>.Default);
            var newData = CloneAndSortBy(data, x => (x.FormationId, x.FrameIndex), System.Collections.Generic.Comparer<(uint FormationId, int FrameIndex)>.Default);
            var table = new HeroFormationFrameEntityTable(newData);
            memory = new MemoryDatabase(
                memory.EnemyBaseEntityTable,
                memory.EnemyLevelStatusEntityTable,
                memory.EnemySkillEffectEntityTable,
                memory.EnemySkillEntityTable,
                memory.EnemySkillSetEntityTable,
                memory.HeroFormationEntityTable,
                table
            
            );
        }

    }
}