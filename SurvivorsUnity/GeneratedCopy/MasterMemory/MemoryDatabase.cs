// <auto-generated />
#pragma warning disable CS0105
using Master.Constants;
using Master.Tables.Enemy;
using Master.Tables.Hero;
using MasterMemory.Validation;
using MasterMemory;
using MessagePack;
using System.Collections.Generic;
using System;
using App.MD.Tables;

namespace App.MD
{
   public sealed class MemoryDatabase : MemoryDatabaseBase
   {
        public EnemyBaseEntityTable EnemyBaseEntityTable { get; private set; }
        public EnemyLevelStatusEntityTable EnemyLevelStatusEntityTable { get; private set; }
        public EnemySkillEffectEntityTable EnemySkillEffectEntityTable { get; private set; }
        public EnemySkillEntityTable EnemySkillEntityTable { get; private set; }
        public EnemySkillSetEntityTable EnemySkillSetEntityTable { get; private set; }
        public HeroFormationEntityTable HeroFormationEntityTable { get; private set; }
        public HeroFormationFrameEntityTable HeroFormationFrameEntityTable { get; private set; }

        public MemoryDatabase(
            EnemyBaseEntityTable EnemyBaseEntityTable,
            EnemyLevelStatusEntityTable EnemyLevelStatusEntityTable,
            EnemySkillEffectEntityTable EnemySkillEffectEntityTable,
            EnemySkillEntityTable EnemySkillEntityTable,
            EnemySkillSetEntityTable EnemySkillSetEntityTable,
            HeroFormationEntityTable HeroFormationEntityTable,
            HeroFormationFrameEntityTable HeroFormationFrameEntityTable
        )
        {
            this.EnemyBaseEntityTable = EnemyBaseEntityTable;
            this.EnemyLevelStatusEntityTable = EnemyLevelStatusEntityTable;
            this.EnemySkillEffectEntityTable = EnemySkillEffectEntityTable;
            this.EnemySkillEntityTable = EnemySkillEntityTable;
            this.EnemySkillSetEntityTable = EnemySkillSetEntityTable;
            this.HeroFormationEntityTable = HeroFormationEntityTable;
            this.HeroFormationFrameEntityTable = HeroFormationFrameEntityTable;
        }

        public MemoryDatabase(byte[] databaseBinary, bool internString = true, MessagePack.IFormatterResolver formatterResolver = null, int maxDegreeOfParallelism = 1)
            : base(databaseBinary, internString, formatterResolver, maxDegreeOfParallelism)
        {
        }

        protected override void Init(Dictionary<string, (int offset, int count)> header, System.ReadOnlyMemory<byte> databaseBinary, MessagePack.MessagePackSerializerOptions options, int maxDegreeOfParallelism)
        {
            if(maxDegreeOfParallelism == 1)
            {
                InitSequential(header, databaseBinary, options, maxDegreeOfParallelism);
            }
            else
            {
                InitParallel(header, databaseBinary, options, maxDegreeOfParallelism);
            }
        }

        void InitSequential(Dictionary<string, (int offset, int count)> header, System.ReadOnlyMemory<byte> databaseBinary, MessagePack.MessagePackSerializerOptions options, int maxDegreeOfParallelism)
        {
            this.EnemyBaseEntityTable = ExtractTableData<EnemyBaseEntity, EnemyBaseEntityTable>(header, databaseBinary, options, xs => new EnemyBaseEntityTable(xs));
            this.EnemyLevelStatusEntityTable = ExtractTableData<EnemyLevelStatusEntity, EnemyLevelStatusEntityTable>(header, databaseBinary, options, xs => new EnemyLevelStatusEntityTable(xs));
            this.EnemySkillEffectEntityTable = ExtractTableData<EnemySkillEffectEntity, EnemySkillEffectEntityTable>(header, databaseBinary, options, xs => new EnemySkillEffectEntityTable(xs));
            this.EnemySkillEntityTable = ExtractTableData<EnemySkillEntity, EnemySkillEntityTable>(header, databaseBinary, options, xs => new EnemySkillEntityTable(xs));
            this.EnemySkillSetEntityTable = ExtractTableData<EnemySkillSetEntity, EnemySkillSetEntityTable>(header, databaseBinary, options, xs => new EnemySkillSetEntityTable(xs));
            this.HeroFormationEntityTable = ExtractTableData<HeroFormationEntity, HeroFormationEntityTable>(header, databaseBinary, options, xs => new HeroFormationEntityTable(xs));
            this.HeroFormationFrameEntityTable = ExtractTableData<HeroFormationFrameEntity, HeroFormationFrameEntityTable>(header, databaseBinary, options, xs => new HeroFormationFrameEntityTable(xs));
        }

        void InitParallel(Dictionary<string, (int offset, int count)> header, System.ReadOnlyMemory<byte> databaseBinary, MessagePack.MessagePackSerializerOptions options, int maxDegreeOfParallelism)
        {
            var extracts = new Action[]
            {
                () => this.EnemyBaseEntityTable = ExtractTableData<EnemyBaseEntity, EnemyBaseEntityTable>(header, databaseBinary, options, xs => new EnemyBaseEntityTable(xs)),
                () => this.EnemyLevelStatusEntityTable = ExtractTableData<EnemyLevelStatusEntity, EnemyLevelStatusEntityTable>(header, databaseBinary, options, xs => new EnemyLevelStatusEntityTable(xs)),
                () => this.EnemySkillEffectEntityTable = ExtractTableData<EnemySkillEffectEntity, EnemySkillEffectEntityTable>(header, databaseBinary, options, xs => new EnemySkillEffectEntityTable(xs)),
                () => this.EnemySkillEntityTable = ExtractTableData<EnemySkillEntity, EnemySkillEntityTable>(header, databaseBinary, options, xs => new EnemySkillEntityTable(xs)),
                () => this.EnemySkillSetEntityTable = ExtractTableData<EnemySkillSetEntity, EnemySkillSetEntityTable>(header, databaseBinary, options, xs => new EnemySkillSetEntityTable(xs)),
                () => this.HeroFormationEntityTable = ExtractTableData<HeroFormationEntity, HeroFormationEntityTable>(header, databaseBinary, options, xs => new HeroFormationEntityTable(xs)),
                () => this.HeroFormationFrameEntityTable = ExtractTableData<HeroFormationFrameEntity, HeroFormationFrameEntityTable>(header, databaseBinary, options, xs => new HeroFormationFrameEntityTable(xs)),
            };
            
            System.Threading.Tasks.Parallel.Invoke(new System.Threading.Tasks.ParallelOptions
            {
                MaxDegreeOfParallelism = maxDegreeOfParallelism
            }, extracts);
        }

        public ImmutableBuilder ToImmutableBuilder()
        {
            return new ImmutableBuilder(this);
        }

        public DatabaseBuilder ToDatabaseBuilder()
        {
            var builder = new DatabaseBuilder();
            builder.Append(this.EnemyBaseEntityTable.GetRawDataUnsafe());
            builder.Append(this.EnemyLevelStatusEntityTable.GetRawDataUnsafe());
            builder.Append(this.EnemySkillEffectEntityTable.GetRawDataUnsafe());
            builder.Append(this.EnemySkillEntityTable.GetRawDataUnsafe());
            builder.Append(this.EnemySkillSetEntityTable.GetRawDataUnsafe());
            builder.Append(this.HeroFormationEntityTable.GetRawDataUnsafe());
            builder.Append(this.HeroFormationFrameEntityTable.GetRawDataUnsafe());
            return builder;
        }

        public DatabaseBuilder ToDatabaseBuilder(MessagePack.IFormatterResolver resolver)
        {
            var builder = new DatabaseBuilder(resolver);
            builder.Append(this.EnemyBaseEntityTable.GetRawDataUnsafe());
            builder.Append(this.EnemyLevelStatusEntityTable.GetRawDataUnsafe());
            builder.Append(this.EnemySkillEffectEntityTable.GetRawDataUnsafe());
            builder.Append(this.EnemySkillEntityTable.GetRawDataUnsafe());
            builder.Append(this.EnemySkillSetEntityTable.GetRawDataUnsafe());
            builder.Append(this.HeroFormationEntityTable.GetRawDataUnsafe());
            builder.Append(this.HeroFormationFrameEntityTable.GetRawDataUnsafe());
            return builder;
        }

#if !DISABLE_MASTERMEMORY_VALIDATOR

        public ValidateResult Validate()
        {
            var result = new ValidateResult();
            var database = new ValidationDatabase(new object[]
            {
                EnemyBaseEntityTable,
                EnemyLevelStatusEntityTable,
                EnemySkillEffectEntityTable,
                EnemySkillEntityTable,
                EnemySkillSetEntityTable,
                HeroFormationEntityTable,
                HeroFormationFrameEntityTable,
            });

            ((ITableUniqueValidate)EnemyBaseEntityTable).ValidateUnique(result);
            ValidateTable(EnemyBaseEntityTable.All, database, "EnemyId", EnemyBaseEntityTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)EnemyLevelStatusEntityTable).ValidateUnique(result);
            ValidateTable(EnemyLevelStatusEntityTable.All, database, "(EnemyId, Level)", EnemyLevelStatusEntityTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)EnemySkillEffectEntityTable).ValidateUnique(result);
            ValidateTable(EnemySkillEffectEntityTable.All, database, "EffectId", EnemySkillEffectEntityTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)EnemySkillEntityTable).ValidateUnique(result);
            ValidateTable(EnemySkillEntityTable.All, database, "SkillId", EnemySkillEntityTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)EnemySkillSetEntityTable).ValidateUnique(result);
            ValidateTable(EnemySkillSetEntityTable.All, database, "(SkillSetId, SkillId)", EnemySkillSetEntityTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)HeroFormationEntityTable).ValidateUnique(result);
            ValidateTable(HeroFormationEntityTable.All, database, "FormationId", HeroFormationEntityTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)HeroFormationFrameEntityTable).ValidateUnique(result);
            ValidateTable(HeroFormationFrameEntityTable.All, database, "(FormationId, FrameIndex)", HeroFormationFrameEntityTable.PrimaryKeySelector, result);

            return result;
        }

#endif

        static MasterMemory.Meta.MetaDatabase metaTable;

        public static object GetTable(MemoryDatabase db, string tableName)
        {
            switch (tableName)
            {
                case "EnemyBaseEntity":
                    return db.EnemyBaseEntityTable;
                case "EnemyLevelStatusEntity":
                    return db.EnemyLevelStatusEntityTable;
                case "EnemySkillEffectEntity":
                    return db.EnemySkillEffectEntityTable;
                case "EnemySkillEntity":
                    return db.EnemySkillEntityTable;
                case "EnemySkillSetEntity":
                    return db.EnemySkillSetEntityTable;
                case "HeroFormationEntity":
                    return db.HeroFormationEntityTable;
                case "HeroFormationFrameEntity":
                    return db.HeroFormationFrameEntityTable;
                
                default:
                    return null;
            }
        }

#if !DISABLE_MASTERMEMORY_METADATABASE

        public static MasterMemory.Meta.MetaDatabase GetMetaDatabase()
        {
            if (metaTable != null) return metaTable;

            var dict = new Dictionary<string, MasterMemory.Meta.MetaTable>();
            dict.Add("EnemyBaseEntity", App.MD.Tables.EnemyBaseEntityTable.CreateMetaTable());
            dict.Add("EnemyLevelStatusEntity", App.MD.Tables.EnemyLevelStatusEntityTable.CreateMetaTable());
            dict.Add("EnemySkillEffectEntity", App.MD.Tables.EnemySkillEffectEntityTable.CreateMetaTable());
            dict.Add("EnemySkillEntity", App.MD.Tables.EnemySkillEntityTable.CreateMetaTable());
            dict.Add("EnemySkillSetEntity", App.MD.Tables.EnemySkillSetEntityTable.CreateMetaTable());
            dict.Add("HeroFormationEntity", App.MD.Tables.HeroFormationEntityTable.CreateMetaTable());
            dict.Add("HeroFormationFrameEntity", App.MD.Tables.HeroFormationFrameEntityTable.CreateMetaTable());

            metaTable = new MasterMemory.Meta.MetaDatabase(dict);
            return metaTable;
        }

#endif
    }
}